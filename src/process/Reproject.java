package process;

import java.util.ArrayList;

import math.geom2d.Point2D;
import math.geom3d.Point3D;
import math.geom3d.Vector3D;
import utils2D.Utils2D;

/**
 *  
 * @author Nick
 * Translate an Extrusion2D path into Extrusion3D by projecting it onto the layer shape mesh.
 */
public class Reproject {
	private double offset;
	private Slicer s;
	/**
	 * Main reprojection method.
	 * @param path 2D path to project onto the layer shape.
	 * @param offset Height to place the layer shape at.
	 * @param s Slicer to retrieve the layer shape from.
	 * @return A list of Extrusion3D paths generated by projecting path onto s.shape.
	 */
	public Reproject(double offset, Slicer s){
		this.offset = offset;
		this.s = s;
	}
	/**
	 * Project a series of 2d extrusions which have already been segmented based on
	 * the topology of the surface stored in slicer s.
	 * @param path Path to project.
	 * @return A continuous path of 3d extrusions.
	 */
	public ArrayList<Extrusion3D> Proj(ArrayList<Extrusion2D> path){
		s.shape.setOffset(offset);
		ArrayList<Extrusion3D> output = new ArrayList<Extrusion3D>();
		ArrayList<Extrusion2D> travels = new ArrayList<Extrusion2D>();
		for(Extrusion2D e: path){
			if(e.ExtrusionType==0){
				travels.add(e);
				continue;
			}
			if(!travels.isEmpty()){
				//End of a series of travels, since we didn't just hit continue.
				output.addAll(projectTravel(travels,e.firstPoint()));
				travels.clear();				
			}
			output.add(projectExtrusion(e));
		}
		return output;
	}
	/**
	 * Project a shell or infill segment onto s.shape.
	 * @param e 2D extrusion to project.
	 * @param s Slicer to retrieve shape from.
	 * @return An Extrusion3D path with the same type as e.
	 */
	private Extrusion3D projectExtrusion(Extrusion2D e){
		s.shape.setOffset(offset);	//In case it's been changed, very low cost operation if it hasn't.
		return new Extrusion3D(s.shape.project(e.firstPoint()), s.shape.project(e.lastPoint()), e.ExtrusionType);
	}
	/**
	 * Place an Extrusion2D at a given z to create a flat Extrusion3D.
	 * @param e 2d extrusion segment
	 * @param z height to place segment at.
	 * @return 3d extrusion segment parallel to the XY plane.
	 */
	private static Extrusion3D setZ(Extrusion2D e, double z){
		return new Extrusion3D(Utils2D.setZ(e.firstPoint(), z),Utils2D.setZ(e.lastPoint(), z),e.ExtrusionType);
	}
	/**
	 * Transforms a series of 2D travel moves length>=1 into a series of 3D travel moves which
	 * go up to their maximum height then lower straight down to the end point, without
	 * dropping into any valleys in between.
	 * @param travels
	 * @param s
	 * @return
	 */
	private ArrayList<Extrusion3D> projectTravel(ArrayList<Extrusion2D> travels, Point2D end){
		ArrayList<Extrusion3D> output = new ArrayList<Extrusion3D>();
		Extrusion3D first = projectExtrusion(travels.get(0));
		Vector3D rise = new Vector3D(0,0,s.lift);
		Extrusion3D lift = new Extrusion3D(first.firstPoint(),first.firstPoint().plus(rise),0);
		output.add(lift);
//		first = raise(first,s.lift);
//		output.add(first);
		double z = lift.lastPoint().getZ();
//		travels.remove(0);	//So we don't re-add the first segment.
		for(Extrusion2D e : travels){
			//Nothing happens here if first was the only edge.
			Extrusion3D proj = projectExtrusion(e);
			if(proj.lastPoint().getZ()+s.lift>z){
				//Need to keep sloping up on this one.
				Point3D last = output.get(output.size()-1).lastPoint();
				output.add(new Extrusion3D(last,liftP(proj.lastPoint()),0));
				z = proj.lastPoint().getZ()+s.lift;
			}
			else output.add(setZ(e,z));
		}
		Extrusion3D last = output.get(output.size()-1);
		Extrusion3D lower = new Extrusion3D(last.lastPoint(),s.shape.project(end),0);
		output.add(lower);
		return output;
	}
	/**
	 * @param p Point to lift
	 * @return A copy of p s.lift mm above p's position.
	 */
	private Point3D liftP(Point3D p) {
		return p.plus(new Vector3D(0,0,s.lift));
	}
}
